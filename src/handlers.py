import random

from telegram import ForceReply, Update
from telegram.ext import (
    ContextTypes,
)

from ioc.services_container import ServicesContainer
from proto.get_chat_members import get_all_participants


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    await update.message.reply_html(
        rf"Hi {user.mention_html()}!",
        reply_markup=ForceReply(selective=True),
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    await update.message.reply_text("Help!")


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Echo the user message."""
    await update.message.reply_text(update.message.text)


async def handle_chance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    command, tail = ServicesContainer.formatter_service().extract_command(update)

    if not tail:
        reply = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - ¬´—à–∞–Ω—Å [—Ç–µ–∫—Å—Ç]¬ª"
        await update.message.reply_text(reply)
        return

    percent = random.randint(0, 100)

    reply = f"–®–∞–Ω—Å ¬´{tail}¬ª ‚Äì {percent}%"
    await update.message.reply_text(reply)


async def handle_choose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_text = update.message.text.strip()

    parts = message_text.split(maxsplit=1)
    tail = parts[1] if len(parts) > 1 else ""

    if not tail:
        reply = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ‚Äì ¬´–í—ã–±—Ä–∞—Ç—å [–≤–∞—Ä–∏–∞–Ω—Ç 1], [–≤–∞—Ä–∏–∞–Ω—Ç 2], [–≤–∞—Ä–∏–∞–Ω—Ç 3] ...¬ª"
        await update.message.reply_text(reply)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç—ã–º
    options = [opt.strip() for opt in tail.split(",") if opt.strip()]

    if len(options) < 2:
        reply = "–£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!"
        await update.message.reply_text(reply)
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    choice = random.choice(options)
    reply = f"–Ø –≤—ã–±–∏—Ä–∞—é ¬´{choice}¬ª"

    await update.message.reply_text(reply)

async def handle_who(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    command, tail = ServicesContainer.formatter_service().extract_command(update)

    if not tail:
        reply = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –∫—Ç–æ [—Ç–µ–∫—Å—Ç]¬ª"
        await update.message.reply_text(reply)
        return

    participants = await get_all_participants(update.effective_chat.id)
    users_with_username = [u for u in participants if u["username"]]

    if not users_with_username:
        return None

    random_user = random.choice(users_with_username)["username"]
    await update.message.reply_text(f"@{random_user}, {tail}")


async def handle_to_whom(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    command, tail = ServicesContainer.formatter_service().extract_command(update)

    if not tail:
        reply = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –∫–æ–º—É [—Ç–µ–∫—Å—Ç]¬ª"
        await update.message.reply_text(reply)
        return

    participants = await get_all_participants(update.effective_chat.id)
    users_with_username = [u for u in participants if u["username"]]

    if not users_with_username:
        return None

    random_user = random.choice(users_with_username)["username"]
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{random_user} {tail}")


async def handle_phobia(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    fears = [
        "–±–æ–∏—Ç—Å—è –∫–æ—Ç–æ–≤ –≤ —à–ª—è–ø–∞—Ö",
        "—É–∂–∞—Å–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã—Ö —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤",
        "–ø–∞–Ω–∏—á–µ—Å–∫–∏ –∏–∑–±–µ–≥–∞–µ—Ç –∫–ª–æ—É–Ω–æ–≤ —Å –≥–∏—Ç–∞—Ä–æ–π",
        "–Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ö–æ–ª–æ–¥–Ω—ã–π —á–∞–π",
        "–±–æ–∏—Ç—Å—è –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–æ—Å–∫–∏ –≤ —Å—Ç–∏—Ä–∞–ª–∫–µ",
        "–¥—Ä–æ–∂–∏—Ç –ø—Ä–∏ –≤–∏–¥–µ –≥–æ–≤–æ—Ä—è—â–∏—Ö –ø–æ–ø—É–≥–∞–µ–≤",
        "–≤ —É–∂–∞—Å–µ –æ—Ç –±—É–¥–∏–ª—å–Ω–∏–∫–æ–≤ –ø–æ —É—Ç—Ä–∞–º",
        "–±–æ–∏—Ç—Å—è —Å–ª–æ–º–∞—Ç—å –∫–∞–±–ª—É–∫ –≤ –≤–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç",
        "–æ–ø–∞—Å–∞–µ—Ç—Å—è –ª–∏—Ñ—Ç–æ–≤ –±–µ–∑ –∫–Ω–æ–ø–∫–∏ '—Å—Ç–æ–ø'",
        "–±–µ–∂–∏—Ç –æ—Ç —Ä–æ–±–æ—Ç–æ–≤-–ø—ã–ª–µ—Å–æ—Å–æ–≤",
        "–±–æ–∏—Ç—Å—è –æ–ø–æ–∑–¥–∞—Ç—å –Ω–∞ –∞–≤—Ç–æ–±—É—Å –≤–æ —Å–Ω–µ",
        "–Ω–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –∑–≤—É–∫ —Å–∫—Ä–∏–ø—è—â–µ–≥–æ –ø–µ–Ω–æ–ø–ª–∞—Å—Ç–∞",
        "—É–∂–∞—Å–∞–µ—Ç—Å—è –∑–µ–ª—ë–Ω—ã—Ö –æ–≥—É—Ä—Ü–æ–≤",
        "–±–æ–∏—Ç—Å—è –ª—é–¥–µ–π –≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–≤–∏—Ç–µ—Ä–∞—Ö",
        "–ø–∞–Ω–∏—á–µ—Å–∫–∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –¥–ª–∏–Ω–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏",
        "–±–æ–∏—Ç—Å—è –∑–∞–±—ã—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç Wi-Fi",
        "–¥—Ä–æ–∂–∏—Ç –ø—Ä–∏ –≤–∏–¥–µ –∫–æ—Ç–∞ —Å –¥–≤—É–º—è —Ö–≤–æ—Å—Ç–∞–º–∏",
        "–±–æ–∏—Ç—Å—è —á–∞–π–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤–∏—Å—Ç—è—Ç",
        "—Ç–µ—Ä—è–µ—Ç—Å—è –ø—Ä–∏ –≤–∏–¥–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–≤–µ—Ä–µ–π —à–∫–∞—Ñ–∞ –Ω–æ—á—å—é",
        "–≤ —É–∂–∞—Å–µ –æ—Ç —Å–ª–æ–º–∞–Ω–Ω—ã—Ö –∫–∞—Ä–∞–Ω–¥–∞—à–µ–π",
        "–±–æ–∏—Ç—Å—è –º—ã–ª—å–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π –≤ —Ç–µ–º–Ω–æ—Ç–µ",
        "–æ–ø–∞—Å–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Å–æ–ª–µ–Ω–Ω–æ–≥–æ —Å—É–ø–∞",
        "–±–æ–∏—Ç—Å—è –ø–æ—Ç–µ—Ä—è—Ç—å –ø—É–ª—å—Ç –æ—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞",
        "—É–∂–∞—Å–∞–µ—Ç—Å—è –ª—é–¥–µ–π –±–µ–∑ –Ω–æ—Å–∫–æ–≤ –¥–æ–º–∞",
        "–±–æ–∏—Ç—Å—è –∑–∞—Å—Ç—Ä—è—Ç—å –≤ –ø–æ–≤–æ—Ä–æ—Ç–Ω–æ–π –¥–≤–µ—Ä–∏",
        "–ø–∞–Ω–∏—á–µ—Å–∫–∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "–±–æ–∏—Ç—Å—è —É–≤–∏–¥–µ—Ç—å —Ç–∞—Ä–∞–∫–∞–Ω–∞ –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö",
        "–¥—Ä–æ–∂–∏—Ç –æ—Ç –∑–∞–ø–∞—Ö–∞ –ø—Ä–æ–∫–∏—Å—à–µ–≥–æ –º–æ–ª–æ–∫–∞",
        "–±–æ–∏—Ç—Å—è –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –¥–≤–æ–π–Ω–∏–∫–∞ –≤ –º–µ—Ç—Ä–æ",
        "–≤ —É–∂–∞—Å–µ –æ—Ç —Å–º–∞–π–ª–∏–∫–∞ üôÇ –±–µ–∑ —ç–º–æ—Ü–∏–π",
    ]
    fear = random.choice(fears)

    chat_id = update.effective_chat.id
    participants = await get_all_participants(chat_id)


    random_user = random.choice(participants)
    fear = random.choice(fears)

    mention = f"[{random_user['username']}](tg://user?id={random_user['id']})"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"{mention}, {fear} üò±",
        parse_mode="Markdown",
    )


async def handle_yang_thug(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    command, tail = ServicesContainer.formatter_service().extract_command(update)

    if not tail:
        reply = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - —è–Ω–≥ —Ç—É–∫¬ª"
        await update.message.reply_text(reply)
        return

    chat_id = update.effective_chat.id
    participants = await get_all_participants(chat_id)
    users_with_username = [u for u in participants if u["username"]]


    random_user = random.choice(users_with_username)

    mention = f"[{random_user['username']}](tg://user?id={random_user['id']})"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"{mention}, —Ç—ã —É–∂–µ –ø–æ—Å–ª—É—à–∞–ª –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º –Ø–Ω–≥ –¢—É–∫–∞?",
        parse_mode="Markdown",
    )


from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ContextTypes

# --- –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–≤–µ—Å—Ç–∞ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ ---
events = {
    "–Ω–∞–ª–µ–≤–æ": [
        {"description": "–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –≤–æ–ª–∫–∞ üê∫", "fail_range": (3, 6), "reward_range": (0, 2)},
        {"description": "–ù–∞—à–ª–∏ —è–≥–æ–¥–Ω—É—é –ø–æ–ª—è–Ω—É üçì", "fail_range": (0, 1), "reward_range": (1, 3)},
        {"description": "–ù–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –ª–µ—Å üå≤", "fail_range": (2, 4), "reward_range": (0, 1)},
        {"description": "–í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç–∞—Ä—ã–π –∫–æ–ª–æ–¥–µ—Ü üíß", "fail_range": (0, 1), "reward_range": (1, 4)},
        {"description": "–°–∫–≤–æ–∑—å –¥–µ—Ä–µ–≤—å—è –º–µ–ª—å–∫–Ω—É–ª–∞ —Ç–µ–Ω—å ü¶â", "fail_range": (3, 5), "reward_range": (0, 1)},
    ],
    "–Ω–∞–ø—Ä–∞–≤–æ": [
        {"description": "–í—ã –Ω–∞—à–ª–∏ —Å—Ç–∞—Ä—ã–π —Å—É–Ω–¥—É–∫ üí∞", "fail_range": (0, 1), "reward_range": (2, 5)},
        {"description": "–ü–∞–¥–µ–Ω–∏–µ —Å –∫–æ—á–∫–∏! üò±", "fail_range": (4, 7), "reward_range": (0, 1)},
        {"description": "–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä—É—á–µ–π, –ø–æ—Ä–∞ –ø–∏—Ç—å –≤–æ–¥—É üíß", "fail_range": (1, 3), "reward_range": (0, 1)},
        {"description": "–í—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–Ω–∏–∫–∞ üßô", "fail_range": (0, 1), "reward_range": (1, 4)},
        {"description": "–õ–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∏–Ω–∫–∞ –ø—É—Å—Ç–∞ üåø", "fail_range": (2, 5), "reward_range": (0, 1)},
    ]
}

# --- –ö–æ–º–∞–Ω–¥–∞ /–∫–≤–µ—Å—Ç ---
async def start_quest(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["health"] = random.randint(8, 12)
    context.user_data["steps"] = 0  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞–ª–µ–≤–æ", callback_data="quest|–Ω–∞–ª–µ–≤–æ"),
            InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–æ", callback_data="quest|–Ω–∞–ø—Ä–∞–≤–æ"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–¢—ã —Å—Ç–æ–∏—à—å –Ω–∞ —Ä–∞–∑–≤–∏–ª–∫–µ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ª–µ—Å–∞ üå≤. "
             "–í–µ—Ç–µ—Ä —à–µ–ø—á–µ—Ç –æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö, –∞ –¥–æ—Ä–æ–≥–∞ –ø–æ–ª–Ω–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–µ–π. –ö—É–¥–∞ —Ç—ã –ø–æ–π–¥—ë—à—å? üë£",
        reply_markup=reply_markup
    )

async def quest_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    if len(data) != 2 or data[0] != "quest":
        return

    choice = data[1]
    event = random.choice(events.get(choice, []))

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥–∏
    context.user_data["steps"] = context.user_data.get("steps", 0) + 1

    mention = f"[{query.from_user.first_name}](tg://user?id={query.from_user.id})"
    text = f"{mention}, {event['description']}"

    # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π
    health = context.user_data.get("health", 10)
    fail = random.randint(*event.get("fail_range", (0, 0)))
    reward = random.randint(*event.get("reward_range", (0, 0)))

    if fail > 0 and random.random() < 0.7:
        health -= fail
        text += f"\n‚ùå –ü–æ—Ç–µ—Ä—è–Ω–æ {fail} –∑–¥–æ—Ä–æ–≤—å—è. –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {health}"
    elif reward > 0:
        text += f"\nüéÅ –ü–æ–ª—É—á–µ–Ω–æ {reward}!"

    context.user_data["health"] = health

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if health <= 0:
        text += f"\nüíÄ –í—ã –ø–æ–≥–∏–±–ª–∏ –ø–æ—Å–ª–µ {context.user_data['steps']} —à–∞–≥–æ–≤! –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω."
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await query.message.edit_reply_markup(reply_markup=None)
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=query.message.chat.id,
            text=text,
            parse_mode="Markdown"
        )
        return

    # --- –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    keyboard = [
        [
            InlineKeyboardButton("–ù–∞–ª–µ–≤–æ", callback_data="quest|–Ω–∞–ª–µ–≤–æ"),
            InlineKeyboardButton("–ù–∞–ø—Ä–∞–≤–æ", callback_data="quest|–Ω–∞–ø—Ä–∞–≤–æ"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–±—ã—Ç–∏—è
    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text=text,
        parse_mode="Markdown"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–ö—É–¥–∞ –ø–æ–π–¥—ë—à—å –¥–∞–ª—å—à–µ?",
        reply_markup=reply_markup
    )