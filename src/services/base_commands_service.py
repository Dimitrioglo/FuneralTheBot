import random

from telegram import ForceReply, Update

from services.participants_service import ParticipantsService
from exceptions.validation_error import ValidationError
from ioc.logging_container import LoggingContainer
from services.giphy_service import GiphyService

logger = LoggingContainer.logger()


class BaseCommandsService:
    def __init__(
        self,
        participants_service: ParticipantsService,
        giphy_service: GiphyService,
    ):
        self.participants_service = participants_service
        self.giphy_service = giphy_service

    async def process_help(self, update: Update) -> None:
        help_text = (
            "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "üé≤ <b>—à–∞–Ω—Å</b> ‚Äì —É–∑–Ω–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–µ–≥–æ-—Ç–æ\n"
            "ü§π <b>–≤—ã–±—Ä–∞—Ç—å</b> ‚Äì –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
            "üßë‚Äçü§ù‚Äçüßë <b>–∫—Ç–æ</b> ‚Äì –±–æ—Ç –≤—ã–±–µ—Ä–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞\n"
            "üéÅ <b>–∫–æ–º—É</b> ‚Äì –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫–æ–º—É —á—Ç–æ-—Ç–æ –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è\n"
            "üé¨ <b>–≥–∏—Ñ</b> ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π GIF\n"
        )
        await update.effective_chat.send_message(help_text, parse_mode="HTML")

    async def start(self, update: Update) -> None:
        user = update.effective_user
        await update.message.reply_html(
            rf"Hi {user.mention_html()}!",
            reply_markup=ForceReply(selective=True),
        )

    async def chance(self, update: Update, tail: str) -> None:
        percent = random.randint(0, 100)
        reply = f"üîÆ –®–∞–Ω—Å ¬´{tail}¬ª ‚Äì {percent}%"
        await update.effective_chat.send_message(reply)

    async def who(self, update: Update, tail: str) -> None:
        users_with_username = (
            await self.participants_service.get_all_participants(
                update.effective_chat.id
            )
        )
        random_user = random.choice(users_with_username)
        mention = f"[{random_user.get('full_name')}](tg://user?id={random_user.get('id')})"
        await update.effective_chat.send_message(
            text=f"üîÆ {mention} {tail}", parse_mode="Markdown"
        )

    async def choose(self, update: Update, tail: str) -> None:
        options = [opt.strip() for opt in tail.split(",") if opt.strip()]

        if len(options) < 2:
            reply = "–£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!"
            await update.effective_chat.send_message(reply)
            raise ValidationError("Validation error")

        choice = random.choice(options)
        reply = f"üîÆ –Ø –≤—ã–±–∏—Ä–∞—é ¬´{choice}¬ª"

        await update.effective_chat.send_message(reply)

    async def whom(self, update: Update, tail: str) -> None:
        users_with_username = (
            await self.participants_service.get_all_participants(
                update.effective_chat.id
            )
        )
        random_user = random.choice(users_with_username)
        mention = f"[{random_user.get('full_name')}](tg://user?id={random_user.get('id')})"
        await update.effective_chat.send_message(
            text=f"üîÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mention} {tail}", parse_mode="Markdown"
        )

    async def giphy(self, update: Update, tail: str) -> None:
        gif_url = (
            await self.giphy_service.search_gif(tail)
            if tail
            else await self.giphy_service.fetch_random_gif() 
        )
        await update.effective_chat.send_animation(gif_url)
